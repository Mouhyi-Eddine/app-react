{"ast":null,"code":"var _jsxFileName = \"/Users/mouhyi-eddinemoutarajji/Desktop/app-react-poke\\u0301mon/src/components/pokemon-form.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport formatType from '../helpers/format-type';\n\nconst PokemonForm = ({\n  pokemon\n}) => {\n  const [form, setForm] = useState({\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  });\n  const history = useHistory();\n  const types = ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n\n  const hasType = type => {\n    return form.types.value.includes(type);\n  };\n\n  const handleInputeChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const selectType = (type, e) => {\n    const checked = e.target.checked;\n    let newField;\n\n    if (checked) {\n      // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n      const newTypes = form.types.value.concat([type]);\n      newField = {\n        value: newTypes\n      };\n    } else {\n      // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n      const newTypes = form.types.value.filter(currentType => currentType !== type);\n      newField = {\n        value: newTypes\n      };\n    }\n\n    setForm({ ...form,\n      ...{\n        types: newField\n      }\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault(); //console.log(form);\n\n    const isFormValid = validateForm();\n\n    if (isFormValid) {\n      pokemon.name = form.name.value;\n      pokemon.hp = form.hp.value;\n      pokemon.cp = form.cp.value;\n      pokemon.types = form.types.value;\n      PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n    }\n  };\n\n  const validateForm = () => {\n    let newForm = form; // Validator name\n\n    if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg = 'Le nom du pokémon est requis (1-25).';\n      const newField = {\n        value: form.name.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.name.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } // Validator hp\n\n\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField = {\n        value: form.hp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.hp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } // Validator cp\n\n\n    if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField = {\n        value: form.cp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.cp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  };\n\n  const isTypesValid = type => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    } // Cas n°1: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n\n\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return false;\n    } // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n\n\n    return true;\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col s12 m8 offset-m2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card hoverable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: pokemon.picture,\n    alt: pokemon.name,\n    style: {\n      width: '250px',\n      margin: '0 auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-stacked\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 19\n    }\n  }, \"Nom\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    name: \"name\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.name.value,\n    onChange: e => handleInputeChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 19\n    }\n  }), form.name.error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 19\n    }\n  }, form.name.error)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"hp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  }, \"Point de vie\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"hp\",\n    name: \"hp\",\n    type: \"number\",\n    className: \"form-control\",\n    value: form.hp.value,\n    onChange: e => handleInputeChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 19\n    }\n  }), form.hp.error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 19\n    }\n  }, form.hp.error)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"cp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 19\n    }\n  }, \"D\\xE9g\\xE2ts\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"cp\",\n    name: \"cp\",\n    type: \"number\",\n    className: \"form-control\",\n    value: form.cp.value,\n    onChange: e => handleInputeChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }\n  }), form.cp.error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 19\n    }\n  }, form.cp.error)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 19\n    }\n  }, \"Types\"), types.map(type => /*#__PURE__*/React.createElement(\"div\", {\n    key: type,\n    style: {\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: type,\n    type: \"checkbox\",\n    className: \"filled-in\",\n    value: type,\n    disabled: !isTypesValid(type),\n    checked: hasType(type),\n    onChange: e => selectType(type, e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: formatType(type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 27\n    }\n  }, type))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-action center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, \"Valider\")))))));\n};\n\nexport default PokemonForm;","map":{"version":3,"sources":["/Users/mouhyi-eddinemoutarajji/Desktop/app-react-pokémon/src/components/pokemon-form.tsx"],"names":["React","useState","useHistory","formatType","PokemonForm","pokemon","form","setForm","name","value","isValid","hp","cp","types","history","hasType","type","includes","handleInputeChange","e","fieldName","target","fieldValue","newField","selectType","checked","newTypes","concat","filter","currentType","handleSubmit","preventDefault","isFormValid","validateForm","PokemonService","updatePokemon","then","push","id","newForm","test","errorMsg","error","isTypesValid","length","picture","width","margin","map","marginBottom"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport { useHistory} from 'react-router-dom'\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\n  \ntype Props = {\n  pokemon: Pokemon\n};\n\ntype Field = {\n    value?: any,\n    error?: string,\n    isValid?:boolean\n}\ntype Form = {\n    name: Field,\n    hp: Field,\n    cp: Field,\n    types: Field\n}\n  \nconst PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\n const [form, setForm] = useState<Form>({\n        name : { value: pokemon.name, isValid: true},\n        hp : { value: pokemon.hp, isValid: true},\n        cp : { value: pokemon.cp, isValid: true},\n        types : { value: pokemon.types, isValid: true}\n    }); \n\n    const history = useHistory();\n  \n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n   \n  const hasType = (type: string) : boolean=> {\n      return form.types.value.includes(type)\n    }\n    \n    const handleInputeChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n        const fieldName: string = e.target.name;\n        const fieldValue: string = e.target.value;\n        const newField: Field = {[fieldName]: {value: fieldValue}};\n\n        setForm({...form, ...newField});\n\n    }\n\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n        const checked = e.target.checked;\n        let newField: Field;\n    \n        if(checked) {\n          // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n          const newTypes: string[] = form.types.value.concat([type]);\n          newField = { value: newTypes };\n        } else {\n          // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n          const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n          newField = { value: newTypes };\n        }\n    \n        setForm({...form, ...{ types: newField }});\n      }\n\n      const handleSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          //console.log(form);\n          const isFormValid = validateForm();\n          if (isFormValid) {\n            pokemon.name = form.name.value;\n            pokemon.hp = form.hp.value;\n            pokemon.cp = form.cp.value;\n            pokemon.types = form.types.value;\n            PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n          }\n          \n      }\n\n      const validateForm = () => {\n        let newForm: Form = form;\n        \n        // Validator name\n        if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n          const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n          const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n          newForm = { ...newForm, ...{ name: newField } };\n        } else {\n          const newField: Field = { value: form.name.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ name: newField } };\n        }\n    \n        // Validator hp\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n          const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n          const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n          newForm = { ...newForm, ...{ hp: newField } };\n        } else {\n          const newField: Field = { value: form.hp.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ hp: newField } };\n        }\n    \n        // Validator cp\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n          const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n          const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n          newForm = { ...newForm, ...{ cp: newField } };\n        } else {\n          const newField: Field = { value: form.cp.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ cp: newField } };\n        }\n    \n        setForm(newForm);\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n      }\n\n      const isTypesValid = (type: string): boolean => {\n        // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n        // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n        if (form.types.value.length === 1 && hasType(type)) {\n          return false;\n        }\n        \n        // Cas n°1: Le pokémon a au moins 3 types.\n        // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n        if (form.types.value.length >= 3 && !hasType(type)) { \n          return false; \n        } \n        \n        // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n        // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n        return true;\n      }\n\n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name =\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputeChange(e)}></input>\n                  {form.name.error &&\n                  <div className=\"card-panel red accent-1\">\n                      {form.name.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputeChange(e)}></input>\n                  {form.hp.error &&\n                  <div className=\"card-panel red accent-1\">\n                      {form.hp.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputeChange(e)}></input>\n                  {form.cp.error &&\n                  <div className=\"card-panel red accent-1\">\n                      {form.cp.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value = {type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\" >Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;"]},"metadata":{},"sourceType":"module"}