{"ast":null,"code":"import _objectSpread from\"/Users/mouhyi-eddinemoutarajji/Desktop/app-react-poke\\u0301mon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/Users/mouhyi-eddinemoutarajji/Desktop/app-react-poke\\u0301mon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/Users/mouhyi-eddinemoutarajji/Desktop/app-react-poke\\u0301mon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useHistory}from'react-router-dom';import formatType from'../helpers/format-type';var PokemonForm=function PokemonForm(_ref){var pokemon=_ref.pokemon;var _useState=useState({name:{value:pokemon.name,isValid:true},hp:{value:pokemon.hp,isValid:true},cp:{value:pokemon.cp,isValid:true},types:{value:pokemon.types,isValid:true}}),_useState2=_slicedToArray(_useState,2),form=_useState2[0],setForm=_useState2[1];var history=useHistory();var types=['Plante','Feu','Eau','Insecte','Normal','Electrik','Poison','Fée','Vol','Combat','Psy'];var hasType=function hasType(type){return form.types.value.includes(type);};var handleInputeChange=function handleInputeChange(e){var fieldName=e.target.name;var fieldValue=e.target.value;var newField=_defineProperty({},fieldName,{value:fieldValue});setForm(_objectSpread(_objectSpread({},form),newField));};var selectType=function selectType(type,e){var checked=e.target.checked;var newField;if(checked){// Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\nvar newTypes=form.types.value.concat([type]);newField={value:newTypes};}else{// Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\nvar _newTypes=form.types.value.filter(function(currentType){return currentType!==type;});newField={value:_newTypes};}setForm(_objectSpread(_objectSpread({},form),{types:newField}));};var handleSubmit=function handleSubmit(e){e.preventDefault();var isFormValid=validateForm();if(isFormValid){history.push(\"/pokemons/\".concat(pokemon.id));}};var validateForm=function validateForm(){var newForm=form;// Validator name\nif(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)){var errorMsg='Le nom du pokémon est requis (1-25).';var newField={value:form.name.value,error:errorMsg,isValid:false};newForm=_objectSpread(_objectSpread({},newForm),{name:newField});}else{var _newField2={value:form.name.value,error:'',isValid:true};newForm=_objectSpread(_objectSpread({},newForm),{name:_newField2});}// Validator hp\nif(!/^[0-9]{1,3}$/.test(form.hp.value)){var _errorMsg='Les points de vie du pokémon sont compris entre 0 et 999.';var _newField3={value:form.hp.value,error:_errorMsg,isValid:false};newForm=_objectSpread(_objectSpread({},newForm),{hp:_newField3});}else{var _newField4={value:form.hp.value,error:'',isValid:true};newForm=_objectSpread(_objectSpread({},newForm),{hp:_newField4});}// Validator cp\nif(!/^[0-9]{1,2}$/.test(form.cp.value)){var _errorMsg2='Les dégâts du pokémon sont compris entre 0 et 99';var _newField5={value:form.cp.value,error:_errorMsg2,isValid:false};newForm=_objectSpread(_objectSpread({},newForm),{cp:_newField5});}else{var _newField6={value:form.cp.value,error:'',isValid:true};newForm=_objectSpread(_objectSpread({},newForm),{cp:_newField6});}setForm(newForm);return newForm.name.isValid&&newForm.hp.isValid&&newForm.cp.isValid;};var isTypesValid=function isTypesValid(type){// Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n// Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\nif(form.types.value.length===1&&hasType(type)){return false;}// Cas n°1: Le pokémon a au moins 3 types.\n// Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\nif(form.types.value.length>=3&&!hasType(type)){return false;}// Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n// c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\nreturn true;};return/*#__PURE__*/React.createElement(\"form\",{onSubmit:function onSubmit(e){return handleSubmit(e);}},/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col s12 m8 offset-m2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card hoverable\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card-image\"},/*#__PURE__*/React.createElement(\"img\",{src:pokemon.picture,alt:pokemon.name,style:{width:'250px',margin:'0 auto'}})),/*#__PURE__*/React.createElement(\"div\",{className:\"card-stacked\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card-content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"name\"},\"Nom\"),/*#__PURE__*/React.createElement(\"input\",{id:\"name\",name:\"name\",type:\"text\",className:\"form-control\",value:form.name.value,onChange:function onChange(e){return handleInputeChange(e);}}),form.name.error&&/*#__PURE__*/React.createElement(\"div\",{className:\"card-panel red accent-1\"},form.name.error)),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"hp\"},\"Point de vie\"),/*#__PURE__*/React.createElement(\"input\",{id:\"hp\",name:\"hp\",type:\"number\",className:\"form-control\",value:form.hp.value,onChange:function onChange(e){return handleInputeChange(e);}}),form.hp.error&&/*#__PURE__*/React.createElement(\"div\",{className:\"card-panel red accent-1\"},form.hp.error)),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"cp\"},\"D\\xE9g\\xE2ts\"),/*#__PURE__*/React.createElement(\"input\",{id:\"cp\",name:\"cp\",type:\"number\",className:\"form-control\",value:form.cp.value,onChange:function onChange(e){return handleInputeChange(e);}}),form.cp.error&&/*#__PURE__*/React.createElement(\"div\",{className:\"card-panel red accent-1\"},form.cp.error)),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"label\",null,\"Types\"),types.map(function(type){return/*#__PURE__*/React.createElement(\"div\",{key:type,style:{marginBottom:'10px'}},/*#__PURE__*/React.createElement(\"label\",null,/*#__PURE__*/React.createElement(\"input\",{id:type,type:\"checkbox\",className:\"filled-in\",value:type,disabled:!isTypesValid(type),checked:hasType(type),onChange:function onChange(e){return selectType(type,e);}}),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"p\",{className:formatType(type)},type))));}))),/*#__PURE__*/React.createElement(\"div\",{className:\"card-action center\"},/*#__PURE__*/React.createElement(\"button\",{type:\"submit\",className:\"btn\"},\"Valider\")))))));};export default PokemonForm;","map":{"version":3,"sources":["/Users/mouhyi-eddinemoutarajji/Desktop/app-react-pokémon/src/components/pokemon-form.tsx"],"names":["React","useState","useHistory","formatType","PokemonForm","pokemon","name","value","isValid","hp","cp","types","form","setForm","history","hasType","type","includes","handleInputeChange","e","fieldName","target","fieldValue","newField","selectType","checked","newTypes","concat","filter","currentType","handleSubmit","preventDefault","isFormValid","validateForm","push","id","newForm","test","errorMsg","error","isTypesValid","length","picture","width","margin","map","marginBottom"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport { useHistory} from 'react-router-dom'\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\n  \ntype Props = {\n  pokemon: Pokemon\n};\n\ntype Field = {\n    value?: any,\n    error?: string,\n    isValid?:boolean\n}\ntype Form = {\n    name: Field,\n    hp: Field,\n    cp: Field,\n    types: Field\n}\n  \nconst PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\n const [form, setForm] = useState<Form>({\n        name : { value: pokemon.name, isValid: true},\n        hp : { value: pokemon.hp, isValid: true},\n        cp : { value: pokemon.cp, isValid: true},\n        types : { value: pokemon.types, isValid: true}\n    }); \n\n    const history = useHistory();\n  \n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n   \n  const hasType = (type: string) : boolean=> {\n      return form.types.value.includes(type)\n    }\n    \n    const handleInputeChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n        const fieldName: string = e.target.name;\n        const fieldValue: string = e.target.value;\n        const newField: Field = {[fieldName]: {value: fieldValue}};\n\n        setForm({...form, ...newField});\n\n    }\n\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n        const checked = e.target.checked;\n        let newField: Field;\n    \n        if(checked) {\n          // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n          const newTypes: string[] = form.types.value.concat([type]);\n          newField = { value: newTypes };\n        } else {\n          // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n          const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n          newField = { value: newTypes };\n        }\n    \n        setForm({...form, ...{ types: newField }});\n      }\n\n      const handleSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          const isFormValid = validateForm();\n          if (isFormValid) {\n            history.push(`/pokemons/${pokemon.id}`)\n          }\n          \n      }\n\n      const validateForm = () => {\n        let newForm: Form = form;\n        \n        // Validator name\n        if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n          const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n          const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n          newForm = { ...newForm, ...{ name: newField } };\n        } else {\n          const newField: Field = { value: form.name.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ name: newField } };\n        }\n    \n        // Validator hp\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n          const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n          const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n          newForm = { ...newForm, ...{ hp: newField } };\n        } else {\n          const newField: Field = { value: form.hp.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ hp: newField } };\n        }\n    \n        // Validator cp\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n          const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n          const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n          newForm = { ...newForm, ...{ cp: newField } };\n        } else {\n          const newField: Field = { value: form.cp.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ cp: newField } };\n        }\n    \n        setForm(newForm);\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n      }\n\n      const isTypesValid = (type: string): boolean => {\n        // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n        // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n        if (form.types.value.length === 1 && hasType(type)) {\n          return false;\n        }\n        \n        // Cas n°1: Le pokémon a au moins 3 types.\n        // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n        if (form.types.value.length >= 3 && !hasType(type)) { \n          return false; \n        } \n        \n        // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n        // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n        return true;\n      }\n\n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name =\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputeChange(e)}></input>\n                  {form.name.error &&\n                  <div className=\"card-panel red accent-1\">\n                      {form.name.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputeChange(e)}></input>\n                  {form.hp.error &&\n                  <div className=\"card-panel red accent-1\">\n                      {form.hp.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputeChange(e)}></input>\n                  {form.cp.error &&\n                  <div className=\"card-panel red accent-1\">\n                      {form.cp.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value = {type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\" >Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;"]},"metadata":{},"sourceType":"module"}