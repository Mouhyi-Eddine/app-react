{"version":3,"sources":["models/mock-pokemon.ts","helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","pages/pokemon-list.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","App.tsx","index.tsx"],"names":["POKEMONS","id","name","hp","cp","picture","types","created","Date","formatDate","date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","pokemon","borderColor","useState","setColor","history","useHistory","className","onClick","push","onMouseEnter","onMouseLeave","style","src","alt","map","key","PokemonList","pokemons","setPokemons","useEffect","PokemonsDetail","match","setPokemon","forEach","params","toString","width","margin","to","PageNotFound","PokemonForm","value","isValid","form","setForm","hasType","includes","handleInputeChange","e","fieldName","target","fieldValue","newField","validateForm","newForm","test","error","isTypesValid","length","onSubmit","preventDefault","handleSubmit","htmlFor","onChange","marginBottom","disabled","checked","concat","filter","currentType","selectType","PokemonEdit","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.614ee711.chunk.js","sourcesContent":["import Pokemon from './pokemon';\n   \nexport const POKEMONS: Pokemon[] = [\n {\n  id: 1,\n  name: \"Bulbizarre\",\n  hp: 25,\n  cp: 5,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\n  types: [\"Plante\", \"Poison\"],\n  created: new Date()\n },\n {\n  id: 2,\n  name: \"Salam√®che\",\n  hp: 28,\n  cp: 6,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\n  types: [\"Feu\"],\n  created: new Date()\n },\n {\n  id: 3,\n  name: \"Carapuce\",\n  hp: 21,\n  cp: 4,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\n  types: [\"Eau\"],\n  created: new Date()\n },\n {\n  id: 4,\n  name: \"Aspicot\",\n  hp: 16,\n  cp: 2,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\n  types: [\"Insecte\", \"Poison\"],\n  created: new Date()\n },\n {\n  id: 5,\n  name: \"Roucool\",\n  hp: 30,\n  cp: 7,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\n  types: [\"Normal\", \"Vol\"],\n  created: new Date()\n },\n {\n  id: 6,\n  name: \"Rattata\",\n  hp: 18,\n  cp: 6,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\n  types: [\"Normal\"],\n  created: new Date()\n },\n {\n  id: 7,\n  name: \"Piafabec\",\n  hp: 14,\n  cp: 5,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\n  types: [\"Normal\", \"Vol\"],\n  created: new Date()\n },\n {\n  id: 8,\n  name: \"Abo\",\n  hp: 16,\n  cp: 4,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\n  types: [\"Poison\"],\n  created: new Date()\n },\n {\n  id: 9,\n  name: \"Pikachu\",\n  hp: 21,\n  cp: 7,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\n  types: [\"Electrik\"],\n  created: new Date()\n },\n {\n  id: 10,\n  name: \"Sabelette\",\n  hp: 19,\n  cp: 3,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\n  types: [\"Normal\"],\n  created: new Date()\n },\n {\n  id: 11,\n  name: \"M√©lof√©e\",\n  hp: 25,\n  cp: 5,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\n  types: [\"F√©e\"],\n  created: new Date()\n },\n {\n  id: 12,\n  name: \"Groupix\",\n  hp: 17,\n  cp: 8,\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\n  types: [\"Feu\"],\n  created: new Date()\n }\n];\n  \nexport default POKEMONS;","const formatDate = (date: Date = new Date()): string => {\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`\n}\n\nexport default formatDate;","const formatType = (type: string): string => {\n    let color: string;\n   \n    switch (type) {\n      case 'Feu': \n        color = 'red lighten-1'; \n        break; \n      case 'Eau': \n        color = 'blue lighten-1'; \n        break; \n      case 'Plante': \n        color = 'green lighten-1'; \n        break; \n      case 'Insecte': \n        color = 'brown lighten-1'; \n        break; \n      case 'Normal': \n        color = 'grey lighten-3'; \n        break; \n      case 'Vol': \n        color = 'blue lighten-3'; \n        break; \n      case 'Poison': \n        color = 'deep-purple accent-1'; \n        break; \n      case 'F√©e': \n        color = 'pink lighten-4'; \n        break; \n      case 'Psy': \n        color = 'deep-purple darken-2'; \n        break; \n      case 'Electrik': \n        color = 'lime accent-1'; \n        break; \n      case 'Combat': \n        color = 'deep-orange'; \n        break; \n      default: \n        color = 'grey'; \n        break; \n    }\n   \n    return `chip ${color}`;\n  }\n\nexport default formatType;","import React, {FunctionComponent, useState} from 'react'\nimport Pokemon from '../models/pokemon'\nimport './pokemon-card.css'\nimport formatDate from '../helpers/format-date'\nimport formatType from '../helpers/format-type'\nimport { useHistory } from 'react-router-dom'\n\ntype Props = {\n    pokemon: Pokemon,\n    borderColor?: string\n};\n\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {\n\n    const [color, setColor] = useState<string>();\n    const history = useHistory();\n\n    const showBorder = () => {\n        setColor(borderColor);\n    }\n\n    const hideBorder = () => {\n        setColor('#f5f5f5');\n    } \n\n    const gotToPokemon = (id: number) => {\n      history.push(`/pokemons/${id}`);\n    }\n    return (\n        <div className=\"col s6 m4\" onClick= { () => gotToPokemon(pokemon.id)} onMouseEnter = {showBorder} onMouseLeave={hideBorder}>\n          <div className=\"card horizontal\" style= { {borderColor: color} }>\n            <div className=\"card-image\"> \n              <img src={pokemon.picture} alt={pokemon.name}/>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                <p>{pokemon.name}</p>\n                <p><small> {formatDate(pokemon.created)}</small></p>\n                {pokemon.types.map(type =>\n                    <span key = {type} className={formatType(type)}> {type} </span>\n                    )}\n              </div>\n            </div>\n          </div> \n        </div>\n      );\n\n}\n\nexport default PokemonCard;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Pokemon from '../models/pokemon';\nimport POKEMONS from '../models/mock-pokemon';\nimport PokemonCard from '../components/pokemon-card';\n  \nconst PokemonList: FunctionComponent = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  \n  useEffect(() => {\n    setPokemons(POKEMONS);\n  }, []);\n  \n  return (\n    <div>\n      <h1 className=\"center\">Pok√©dex</h1>\n      <div className=\"container\"> \n        <div className=\"row\"> \n        {pokemons.map(pokemon => (\n          <PokemonCard key={pokemon.id} pokemon={pokemon}/>\n        ))}\n        </div>\n      </div>\n    </div> \n  );\n}\n  \nexport default PokemonList;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport POKEMONS from '../models/mock-pokemon';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\n  \ntype Params = { id: string };\n  \nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    POKEMONS.forEach(pokemon => {\n      if (match.params.id === pokemon.id.toString()) {\n        setPokemon(pokemon);\n      }\n    })\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n          <div className=\"col s12 m8 offset-m2\"> \n            <h2 className=\"header center\">{ pokemon.name }</h2>\n            <div className=\"card hoverable\"> \n              <div className=\"card-image\">\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                <Link to ={`/pokemons/edit/${pokemon.id}`} className='btn btn-floating halfway-fab waves-effect waves-light'>\n                  <i className='material-icons'>edit</i>\n                </Link>\n              </div>\n              <div className=\"card-stacked\">\n                <div className=\"card-content\">\n                  <table className=\"bordered striped\">\n                    <tbody>\n                      <tr> \n                        <td>Nom</td> \n                        <td><strong>{ pokemon.name }</strong></td> \n                      </tr>\n                      <tr> \n                        <td>Points de vie</td> \n                        <td><strong>{ pokemon.hp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>D√©g√¢ts</td> \n                        <td><strong>{ pokemon.cp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Types</td> \n                        <td>\n                          {pokemon.types.map(type => (\n                           <span key={type} className={formatType(type)}>{type}</span>\n                          ))}</td> \n                      </tr> \n                      <tr> \n                        <td>Date de cr√©ation</td> \n                        <td>{formatDate(pokemon.created)}</td> \n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"card-action\">\n                  <Link to=\"/\">Retour</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <h4 className=\"center\">Aucun pok√©mon √† afficher !</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n  \nconst PageNotFound: FunctionComponent = () => {\n  \n  return (\n    <div className=\"center\">\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouv√©e\"/>\n      <h1>Hey, cette page n'existe pas !</h1> \n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\n        Retourner √† l'accueil\n      </Link>\n    </div>\n  );\n}\n  \nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory} from 'react-router-dom'\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\n  \ntype Props = {\n  pokemon: Pokemon\n};\n\ntype Field = {\n    value?: any,\n    error?: string,\n    isValid?:boolean\n}\ntype Form = {\n    name: Field,\n    hp: Field,\n    cp: Field,\n    types: Field\n}\n  \nconst PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\n const [form, setForm] = useState<Form>({\n        name : { value: pokemon.name, isValid: true},\n        hp : { value: pokemon.hp, isValid: true},\n        cp : { value: pokemon.cp, isValid: true},\n        types : { value: pokemon.types, isValid: true}\n    }); \n\n    const history = useHistory();\n  \n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'FeÃÅe', 'Vol', 'Combat', 'Psy'\n  ];\n   \n  const hasType = (type: string) : boolean=> {\n      return form.types.value.includes(type)\n    }\n    \n    const handleInputeChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n        const fieldName: string = e.target.name;\n        const fieldValue: string = e.target.value;\n        const newField: Field = {[fieldName]: {value: fieldValue}};\n\n        setForm({...form, ...newField});\n\n    }\n\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n        const checked = e.target.checked;\n        let newField: Field;\n    \n        if(checked) {\n          // Si l'utilisateur coche un type, √† l'ajoute √† la liste des types du pok√©mon.\n          const newTypes: string[] = form.types.value.concat([type]);\n          newField = { value: newTypes };\n        } else {\n          // Si l'utilisateur d√©coche un type, on le retire de la liste des types du pok√©mon.\n          const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n          newField = { value: newTypes };\n        }\n    \n        setForm({...form, ...{ types: newField }});\n      }\n\n      const handleSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          const isFormValid = validateForm();\n          if (isFormValid) {\n            history.push(`/pokemons/${pokemon.id}`)\n          }\n          \n      }\n\n      const validateForm = () => {\n        let newForm: Form = form;\n        \n        // Validator name\n        if(!/^[a-zA-Z√†√©√® ]{3,25}$/.test(form.name.value)) {\n          const errorMsg: string = 'Le nom du pok√©mon est requis (1-25).';\n          const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n          newForm = { ...newForm, ...{ name: newField } };\n        } else {\n          const newField: Field = { value: form.name.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ name: newField } };\n        }\n    \n        // Validator hp\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n          const errorMsg: string = 'Les points de vie du pok√©mon sont compris entre 0 et 999.';\n          const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n          newForm = { ...newForm, ...{ hp: newField } };\n        } else {\n          const newField: Field = { value: form.hp.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ hp: newField } };\n        }\n    \n        // Validator cp\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n          const errorMsg: string = 'Les d√©g√¢ts du pok√©mon sont compris entre 0 et 99';\n          const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n          newForm = { ...newForm, ...{ cp: newField } };\n        } else {\n          const newField: Field = { value: form.cp.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ cp: newField } };\n        }\n    \n        setForm(newForm);\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n      }\n\n      const isTypesValid = (type: string): boolean => {\n        // Cas n¬∞1: Le pok√©mon a un seul type, qui correspond au type pass√© en param√®tre.\n        // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir d√©coch√© ce type (sinon le pok√©mon aurait 0 type, ce qui est interdit)\n        if (form.types.value.length === 1 && hasType(type)) {\n          return false;\n        }\n        \n        // Cas n¬∞1: Le pok√©mon a au moins 3 types.\n        // Dans ce cas il faut emp√™cher √† l'utilisateur de cocher un nouveau type, mais pas de d√©cocher les types existants.\n        if (form.types.value.length >= 3 && !hasType(type)) { \n          return false; \n        } \n        \n        // Apr√®s avoir pass√© les deux tests ci-dessus, on renvoie 'true', \n        // c'est-√†-dire que l'on autorise l'utilisateur √† cocher ou d√©cocher un nouveau type.\n        return true;\n      }\n\n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name =\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputeChange(e)}></input>\n                  {form.name.error &&\n                  <div className=\"card-panel red accent-1\">\n                      {form.name.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputeChange(e)}></input>\n                  {form.hp.error &&\n                  <div className=\"card-panel red accent-1\">\n                      {form.hp.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">D√©g√¢ts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputeChange(e)}></input>\n                  {form.cp.error &&\n                  <div className=\"card-panel red accent-1\">\n                      {form.cp.error}\n                    </div>\n                  }\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value = {type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\" >Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\nimport POKEMONS from '../models/mock-pokemon';\n \ntype Params = { id: string };\n  \nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    POKEMONS.forEach(pokemon => {\n      if (match.params.id === pokemon.id.toString()) {\n        setPokemon(pokemon);\n      }\n    })\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n            <h2 className=\"header center\">√âditer { pokemon.name }</h2>\n            <PokemonForm pokemon={pokemon}></PokemonForm>\n        </div>\n      ) : (\n        <h4 className=\"center\">Aucun pok√©mon √† afficher !</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonEdit;","import React, { FunctionComponent } from 'react';\nimport PokemonList from './pages/pokemon-list';\nimport PokemonsDetail from './pages/pokemon-detail';\nimport PageNotFound from './pages/page-not-found'\nimport PokemonEdit from './pages/pokemon-edit'\nimport { BrowserRouter as Router, Link, Switch, Route} from 'react-router-dom';\n\n  \nconst App: FunctionComponent = () => {\n    \n return (\n    <Router>\n      <div>\n         {/* la bare de navigation */}\n         <nav>\n            <div className=\"naw-wrapper teal\">\n               <Link to=\"/\" className=\"brand-logo center\">Pok√©dex</Link>\n            </div>\n         </nav>\n         {/* le syst√®me de gestion des routes dans notre application */}\n         <Switch>\n            <Route exact path=\"/\" component={PokemonList} />\n            <Route exact path=\"/pokemons\" component={PokemonList} />\n            <Route exact path=\"/pokemons/edit/:id\" component={PokemonEdit} />\n            <Route path=\"/pokemons/:id\" component = {PokemonsDetail} />\n            <Route component = {PageNotFound} />\n         </Switch>\n      </div>\n   </Router>\n    )\n }\n  \nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}